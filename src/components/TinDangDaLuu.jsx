import React, { useEffect, useState, useContext, useRef } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { FaHeart, FaBookmark, FaChevronDown, FaChevronUp } from "react-icons/fa";
import TopNavbar from "./TopNavbar";
import Footer from "./Footer";
import { AuthContext } from "../context/AuthContext";
import "./TinDangDaLuu.css";

const TinDangDaLuu = () => {
  const [posts, setPosts] = useState([]);
  const { user } = useContext(AuthContext);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [showScrollable, setShowScrollable] = useState(false);
  const [visiblePosts, setVisiblePosts] = useState(8); // Hi·ªÉn th·ªã 8 tin ƒë·∫ßu ti√™n
  const [expandedPosts, setExpandedPosts] = useState(8); // Theo d√µi s·ªë tin ƒë√£ m·ªü r·ªông

  const fetchSavedPosts = async (token) => {
    if (!token) return;
    setLoading(true);
    try {
      const res = await axios.get("http://localhost:5133/api/yeuthich/danh-sach", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setPosts(res.data);
    } catch (err) {
      setPosts([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user && user.token) {
      fetchSavedPosts(user.token);
    } else {
      setLoading(false);
    }
  }, [user]);

  const handleRemove = async (id) => {
    if (!user || !user.token) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.");
      return;
    }
    try {
      await axios.delete(`http://localhost:5133/api/yeuthich/xoa/${id}`,
        { headers: { Authorization: `Bearer ${user.token}` } }
      );
      setPosts(prev => prev.filter(post => post.maTinDang !== id));
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi animation
      showNotification("ƒê√£ g·ª° l∆∞u tin ƒëƒÉng kh·ªèi danh s√°ch y√™u th√≠ch.", "success");
    } catch (err) {
      let msg = "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.";
      if (err.response && err.response.data && err.response.data.message) {
        const backendMsg = err.response.data.message;
        if (backendMsg.includes("ch∆∞a x√°c minh") || backendMsg.toLowerCase().includes("gmail")) {
          msg = "B·∫°n ch∆∞a x√°c minh gmail. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n.";
        } else if (backendMsg.includes("ch∆∞a nh·∫≠p") || backendMsg.toLowerCase().includes("s·ªë ƒëi·ªán tho·∫°i")) {
          msg = "B·∫°n ch∆∞a nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin (v√≠ d·ª•: S·ªë ƒëi·ªán tho·∫°i). Vui l√≤ng c·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n.";
        } else {
          msg = backendMsg;
        }
      }
      showNotification(msg, "error");
    }
  };

  const showNotification = (message, type) => {
    // T·∫°o notification element
    const notification = document.createElement('div');
    notification.className = `Tin-dang-da-luu-notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      notification.remove();
    }, 3000);
  };

  const handleImageClick = (maTinDang) => {
    navigate(`/tin-dang/${maTinDang}`);
  };

  const formatPrice = (price) => {
    if (price >= 1000000000) {
      return `${(price / 1000000000).toFixed(1)} t·ª∑`;
    } else if (price >= 1000000) {
      return `${(price / 1000000).toFixed(1)} tri·ªáu`;
    } else if (price >= 1000) {
      return `${(price / 1000).toFixed(0)}k`;
    }
    return price?.toLocaleString();
  };

  const handleShowMore = () => {
    const newExpandedCount = Math.min(expandedPosts + 8, posts.length);
    setExpandedPosts(newExpandedCount);
    setShowScrollable(true);
  };

  const handleCollapse = () => {
    if (expandedPosts > 8) {
      const newExpandedCount = Math.max(expandedPosts - 8, 8);
      setExpandedPosts(newExpandedCount);
      if (newExpandedCount === 8) {
        setShowScrollable(false);
      }
    }
  };

  const displayedPosts = showScrollable ? posts.slice(0, expandedPosts) : posts.slice(0, visiblePosts);

  if (loading) {
    return (
      <>
        <TopNavbar />
        <div className="Tin-dang-da-luu-container">
          <div className="Tin-dang-da-luu-loading">
            <div className="Tin-dang-da-luu-spinner"></div>
            <p>ƒêang t·∫£i tin ƒëƒÉng ƒë√£ l∆∞u...</p>
          </div>
        </div>
        <Footer />
      </>
    );
  }

  return (
    <>
      <TopNavbar />
      <div className="Tin-dang-da-luu-container">
        <div className="Tin-dang-da-luu-wrapper">
          {/* Header v·ªõi tr√°i tim ƒë·∫≠p */}
          <div className="Tin-dang-da-luu-header">
            <div className="Tin-dang-da-luu-main-title">
              <FaHeart className="Tin-dang-da-luu-heart-icon" />
              <h1>Danh s√°ch c√°c tin ƒëƒÉng ƒë√£ l∆∞u</h1>
            </div>
            
            <div className="Tin-dang-da-luu-title">
              <FaBookmark className="Tin-dang-da-luu-icon" />
              <h2>Tin ƒëƒÉng ƒë√£ l∆∞u</h2>
              <span className="Tin-dang-da-luu-count">({posts.length})</span>
            </div>
          </div>

          {/* Content */}
          <div className="Tin-dang-da-luu-content">
            {posts.length === 0 ? (
              <div className="Tin-dang-da-luu-empty">
                <div className="Tin-dang-da-luu-empty-icon">
                  <FaBookmark />
                </div>
                <h3>Ch∆∞a c√≥ tin ƒëƒÉng n√†o ƒë∆∞·ª£c l∆∞u</h3>
                <p>H√£y l∆∞u nh·ªØng tin ƒëƒÉng y√™u th√≠ch ƒë·ªÉ xem l·∫°i sau nh√©!</p>
                <button 
                  className="Tin-dang-da-luu-browse-btn"
                  onClick={() => navigate('/')}
                >
                  Kh√°m ph√° tin ƒëƒÉng
                </button>
              </div>
            ) : (
              <div className="Tin-dang-da-luu-grid-container">
                <div className={`Tin-dang-da-luu-grid ${showScrollable ? 'scrollable' : ''}`}>
                  {displayedPosts.map((post, index) => (
                    <div
                      key={post.maTinDang}
                      className="Tin-dang-da-luu-card"
                      style={{ animationDelay: `${index * 0.1}s` }}
                    >
                      {/* HOT Badge */}
                      {post.savedCount >= 2 && (
                        <div className="Tin-dang-da-luu-hot-badge">
                          <span className="Tin-dang-da-luu-fire-icon">üî•</span>
                          HOT
                        </div>
                      )}

                      {/* Remove Button */}
                      <button
                        className="Tin-dang-da-luu-remove-btn"
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleRemove(post.maTinDang);
                        }}
                        title="B·ªè l∆∞u tin n√†y"
                      >
                        <FaHeart />
                      </button>

                      {/* Card Content */}
                      <div
                        className="Tin-dang-da-luu-card-content"
                        onClick={() => handleImageClick(post.maTinDang)}
                      >
                        {/* Image */}
                        <div className="Tin-dang-da-luu-image-container">
                          {post.images && post.images.length > 0 ? (
                            <img
                              src={post.images[0].startsWith("http") 
                                ? post.images[0] 
                                : `http://localhost:5133${post.images[0]}`}
                              alt="·∫¢nh ƒë·∫°i di·ªán"
                              className="Tin-dang-da-luu-image"
                              loading="lazy"
                            />
                          ) : (
                            <div className="Tin-dang-da-luu-no-image">
                              <span>Kh√¥ng c√≥ ·∫£nh</span>
                            </div>
                          )}
                          <div className="Tin-dang-da-luu-image-overlay"></div>
                        </div>

                        {/* Info */}
                        <div className="Tin-dang-da-luu-info">
                          <h3 className="Tin-dang-da-luu-post-title">{post.tieuDe}</h3>
                          <div className="Tin-dang-da-luu-price">
                            {formatPrice(post.gia)} VND
                          </div>
                          <div className="Tin-dang-da-luu-location">
                            üìç {post.quanHuyen} - {post.tinhThanh}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                {/* N√∫t "Xem th√™m" / "Thu g·ªçn" */}
                {posts.length > 8 && (
                  <div className="Tin-dang-da-luu-toggle-container">
                    {!showScrollable || expandedPosts < posts.length ? (
                      <button 
                        className="Tin-dang-da-luu-toggle-btn"
                        onClick={handleShowMore}
                      >
                        <FaChevronDown />
                        Xem th√™m
                      </button>
                    ) : null}
                    
                    {showScrollable && expandedPosts > 8 && (
                      <button 
                        className="Tin-dang-da-luu-toggle-btn collapse"
                        onClick={handleCollapse}
                      >
                        <FaChevronUp />
                        Thu g·ªçn
                      </button>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
      
    </>
  );
};

export default TinDangDaLuu;