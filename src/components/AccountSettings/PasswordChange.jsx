import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import { AuthContext } from "../../context/AuthContext";
import "./PasswordChange.css";

const PasswordChange = () => {
  const [hasPassword, setHasPassword] = useState(null); // null = ch∆∞a load xong
  const [form, setForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmNewPassword: "",
  });
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // L·∫•y token t·ª´ AuthContext
  const { token } = useContext(AuthContext);

  // Ki·ªÉm tra xem user c√≥ m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng
  useEffect(() => {
    if (!token) {
      setError("‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token ƒë√£ h·∫øt h·∫°n");
      return;
    }

    const checkPasswordStatus = async () => {
      try {
        const response = await axios.get(
          "http://localhost:5133/api/userprofile/has-password",
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        
        console.log("Has password response:", response.data); // Debug log
        setHasPassword(response.data.hasPassword);
      } catch (error) {
        console.error("Error checking password status:", error);
        setError("Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i m·∫≠t kh·∫©u");
        setHasPassword(false); // Fallback to false
      }
    };

    checkPasswordStatus();
  }, [token]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
    // Clear errors when user starts typing
    if (error) setError("");
    if (message) setMessage("");
  };

  const handleSubmit = async () => {
    // Validation
    if (!form.newPassword.trim()) {
      setError("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.");
      return;
    }

    if (form.newPassword.length < 6) {
      setError("‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
      return;
    }

    if (form.newPassword !== form.confirmNewPassword) {
      setError("‚ö†Ô∏è M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.");
      return;
    }

    // N·∫øu user ƒë√£ c√≥ m·∫≠t kh·∫©u nh∆∞ng kh√¥ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i
    if (hasPassword && !form.currentPassword.trim()) {
      setError("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i.");
      return;
    }

    setIsLoading(true);
    setError("");
    setMessage("");

    try {
      const url = "http://localhost:5133/api/userprofile/password";
      
      // T·∫°o payload d·ª±a tr√™n hasPassword
      const payload = {
        newPassword: form.newPassword,
        confirmNewPassword: form.confirmNewPassword,
      };

      // Ch·ªâ th√™m currentPassword n·∫øu user ƒë√£ c√≥ m·∫≠t kh·∫©u
      if (hasPassword) {
        payload.currentPassword = form.currentPassword;
      }

      console.log("Sending payload:", { ...payload, currentPassword: "***" }); // Debug log

      const response = await axios.put(url, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("Password change response:", response.data); // Debug log

      setMessage("‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setError("");
      
      // Reset form
      setForm({
        currentPassword: "",
        newPassword: "",
        confirmNewPassword: "",
      });

      // C·∫≠p nh·∫≠t hasPassword n·∫øu tr∆∞·ªõc ƒë√≥ l√† false
      if (!hasPassword) {
        setHasPassword(true);
      }

    } catch (err) {
      console.error("Password change error:", err.response?.data || err.message);
      
      const errorMsg = err.response?.data?.message || "L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u";
      setError(`‚ùå ${errorMsg}`);
      setMessage("");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    try {
      await axios.delete("http://localhost:5133/api/userprofile/delete", {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      alert("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒëƒÉng xu·∫•t.");
      
      // Clear all storage
      sessionStorage.clear();
      localStorage.clear();
      
      // Redirect to login
      window.location.href = "/login";
    } catch (err) {
      console.error("Delete account error:", err.response?.data || err.message);
      const errorMsg = err.response?.data?.message || "X√≥a t√†i kho·∫£n th·∫•t b·∫°i.";
      setError(`‚ùå ${errorMsg}`);
    } finally {
      setShowDeleteConfirm(false);
    }
  };

  // Loading state
  if (hasPassword === null) {
    return (
      <div className="pc-wrapper">
        <div className="pc-container">
          <div className="loading">ƒêang t·∫£i...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="pc-wrapper">
      <div className="pc-container">
        <h3 className="pc-title">
          {hasPassword ? "ƒê·ªïi m·∫≠t kh·∫©u" : "T·∫°o m·∫≠t kh·∫©u m·ªõi"}
        </h3>

        {/* Debug info (remove in production) */}
        {/* <div style={{ fontSize: '12px', color: '#666', marginBottom: '10px' }}>
          Debug: hasPassword = {hasPassword ? 'true' : 'false'}
        </div> */}

        {/* Ch·ªâ hi·ªÉn th·ªã √¥ m·∫≠t kh·∫©u hi·ªán t·∫°i n·∫øu user ƒë√£ c√≥ m·∫≠t kh·∫©u */}
        {hasPassword && (
          <input
            type="password"
            name="currentPassword"
            placeholder="M·∫≠t kh·∫©u hi·ªán t·∫°i"
            value={form.currentPassword}
            onChange={handleChange}
            disabled={isLoading}
          />
        )}

        <input
          type="password"
          name="newPassword"
          placeholder="M·∫≠t kh·∫©u m·ªõi"
          value={form.newPassword}
          onChange={handleChange}
          disabled={isLoading}
        />

        <input
          type="password"
          name="confirmNewPassword"
          placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
          value={form.confirmNewPassword}
          onChange={handleChange}
          disabled={isLoading}
        />

        <button 
          onClick={handleSubmit}
          disabled={isLoading}
        >
          {isLoading ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
        </button>

        <hr />

        <button
          className="delete-btn"
          onClick={() => setShowDeleteConfirm(true)}
          disabled={isLoading}
        >
          üóëÔ∏è Y√™u c·∫ßu x√≥a t√†i kho·∫£n
        </button>

        {message && <div className="pc-message pc-success">{message}</div>}
        {error && <div className="pc-message pc-error">{error}</div>}
      </div>

      {showDeleteConfirm && (
        <div className="delete-modal">
          <div className="delete-modal-content">
            <h4>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n?</h4>
            <p>H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
            <div className="delete-modal-actions">
              <button onClick={handleDeleteAccount}>‚úÖ ƒê·ªìng √Ω</button>
              <button onClick={() => setShowDeleteConfirm(false)}>‚ùå H·ªßy</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PasswordChange;