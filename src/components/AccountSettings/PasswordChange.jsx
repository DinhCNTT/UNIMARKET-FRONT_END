import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import { AuthContext } from "../../context/AuthContext";
import "./PasswordChange.css";
import toast from 'react-hot-toast';

const PasswordChange = () => {
  const [hasPassword, setHasPassword] = useState(null); // null = ch∆∞a load xong
  const [form, setForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmNewPassword: "",
  });
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // L·∫•y token t·ª´ AuthContext
  const { token } = useContext(AuthContext);

  // Ki·ªÉm tra xem user c√≥ m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng
  useEffect(() => {
    if (!token) {
      setError("‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token ƒë√£ h·∫øt h·∫°n");
      return;
    }

    const checkPasswordStatus = async () => {
      try {
        const response = await axios.get(
          "http://localhost:5133/api/userprofile/has-password",
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        
        console.log("Has password response:", response.data); // Debug log
        setHasPassword(response.data.hasPassword);
      } catch (error) {
        console.error("Error checking password status:", error);
        setError("Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i m·∫≠t kh·∫©u");
        setHasPassword(false); // Fallback to false
      }
    };

    checkPasswordStatus();
  }, [token]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
    // Clear errors when user starts typing
    if (error) setError("");
    if (message) setMessage("");
  };

  const handleSubmit = async () => {
    // Validation
    if (!form.newPassword.trim()) {
      setError("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.");
      return;
    }

    if (form.newPassword.length < 6) {
      setError("‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
      return;
    }

    if (form.newPassword !== form.confirmNewPassword) {
      setError("‚ö†Ô∏è M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.");
      return;
    }

    // N·∫øu user ƒë√£ c√≥ m·∫≠t kh·∫©u nh∆∞ng kh√¥ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i
    if (hasPassword && !form.currentPassword.trim()) {
      setError("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i.");
      return;
    }

    setIsLoading(true);
    setError("");
    setMessage("");

    try {
      const url = "http://localhost:5133/api/userprofile/password";
      
      // T·∫°o payload d·ª±a tr√™n hasPassword
      const payload = {
        newPassword: form.newPassword,
        confirmNewPassword: form.confirmNewPassword,
      };

      // Ch·ªâ th√™m currentPassword n·∫øu user ƒë√£ c√≥ m·∫≠t kh·∫©u
      if (hasPassword) {
        payload.currentPassword = form.currentPassword;
      }

      console.log("Sending payload:", { ...payload, currentPassword: "***" }); // Debug log

      const response = await axios.put(url, payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("Password change response:", response.data); // Debug log

      toast.success("C·∫≠p Nh·∫≠t M·∫≠t Kh·∫©u Th√†nh C√¥ng !.", {
        duration: 4000,
        position: "top-center",
        style: {
          background: "#fff9db",             // V√†ng kem nh·∫π ki·ªÉu m·∫°ng x√£ h·ªôi
          color: "#3f3f3f",                  // M√†u ch·ªØ x√°m than, d·ªÖ ƒë·ªçc
          fontSize: "16px",                  // C·ª° ch·ªØ v·ª´a m·∫Øt
          fontWeight: "600",                 // Ch·ªØ ƒë·∫≠m nh∆∞ng kh√¥ng th√¥
          padding: "16px 22px",              // D√†y d·∫∑n
          borderRadius: "14px",              // Bo tr√≤n nhi·ªÅu cho m·ªÅm m·∫°i
          border: "1px solid #fcd34d",       // Vi·ªÅn v√†ng pastel
          boxShadow: "0 8px 20px rgba(0,0,0,0.1)", // ƒê·ªï b√≥ng nh·∫π sang tr·ªçng
          backdropFilter: "blur(2px)",       // L√†m n·ªÅn m·ªù nh·∫π (gi·ªëng iOS)
        },
        icon: "üåü",
      });
      setError("");
      
      // Reset form
      setForm({
        currentPassword: "",
        newPassword: "",
        confirmNewPassword: "",
      });

      // C·∫≠p nh·∫≠t hasPassword n·∫øu tr∆∞·ªõc ƒë√≥ l√† false
      if (!hasPassword) {
        setHasPassword(true);
      }

    } catch (err) {
      console.error("Password change error:", err.response?.data || err.message);
      
      const errorMsg = err.response?.data?.message || "L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u";
      setError(`‚ùå ${errorMsg}`);
      setMessage("");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    try {
      await axios.delete("http://localhost:5133/api/userprofile/delete", {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      alert("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒëƒÉng xu·∫•t.");
      
      // Clear all storage
      sessionStorage.clear();
      localStorage.clear();
      
      // Redirect to login
      window.location.href = "/login";
    } catch (err) {
      console.error("Delete account error:", err.response?.data || err.message);
      const errorMsg = err.response?.data?.message || "X√≥a t√†i kho·∫£n th·∫•t b·∫°i.";
      setError(`‚ùå ${errorMsg}`);
    } finally {
      setShowDeleteConfirm(false);
    }
  };

  // Loading state
  if (hasPassword === null) {
    return (
      <div className="pc-wrapper">
        <div className="pc-container">
          <div className="loading">ƒêang t·∫£i...</div>
        </div>
      </div>
    );
  }

  return (
  <div className="pc-wrapper">
    <div className="pc-container">
      <h3 className="pc-title">
        {hasPassword ? "ƒê·ªïi m·∫≠t kh·∫©u" : "T·∫°o m·∫≠t kh·∫©u m·ªõi"}
      </h3>

      {hasPassword && (
        <input
          type="password"
          name="currentPassword"
          placeholder="M·∫≠t kh·∫©u hi·ªán t·∫°i"
          value={form.currentPassword}
          onChange={handleChange}
          disabled={isLoading}
        />
      )}

      <input
        type="password"
        name="newPassword"
        placeholder="M·∫≠t kh·∫©u m·ªõi"
        value={form.newPassword}
        onChange={handleChange}
        disabled={isLoading}
      />

      <input
        type="password"
        name="confirmNewPassword"
        placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
        value={form.confirmNewPassword}
        onChange={handleChange}
        disabled={isLoading}
      />

      <div className="pc-actions">
        <button onClick={handleSubmit} disabled={isLoading}>
          {isLoading ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
        </button>

        <button
          className="delete-btn"
          onClick={() => setShowDeleteConfirm(true)}
          disabled={isLoading}
        >
          Y√™u c·∫ßu x√≥a t√†i kho·∫£n
        </button>
      </div>

      {message && <div className="pc-message pc-success">{message}</div>}
      {error && <div className="pc-message pc-error">{error}</div>}
    </div>

    {showDeleteConfirm && (
      <div className="delete-modal">
        <div className="delete-modal-content">
          <h4>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n?</h4>
          <p>H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.</p>
          <div className="delete-modal-actions">
            <button onClick={handleDeleteAccount} className="btn-confirm">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="white"
                viewBox="0 0 24 24"
                style={{ marginRight: 6 }}
              >
                <path d="M20.285 2.857l-11.428 11.428-5.714-5.714-3.143 3.143 8.857 8.857 14.571-14.571z" />
              </svg>
              ƒê·ªìng √Ω
            </button>

            <button
              onClick={() => setShowDeleteConfirm(false)}
              className="btn-cancel"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="#333"
                viewBox="0 0 24 24"
                style={{ marginRight: 6 }}
              >
                <path d="M18.364 5.636l-1.414-1.414L12 9.172 7.05 4.222 5.636 5.636 10.586 10.586 5.636 15.536l1.414 1.414L12 12.828l4.95 4.95 1.414-1.414-4.95-4.95z" />
              </svg>
              H·ªßy
            </button>
          </div>
        </div>
      </div>
    )}
  </div>
);


};

export default PasswordChange;